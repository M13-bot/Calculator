package application;



import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.text.Text;
import javafx.application.Application;


import javafx.stage.FileChooser;
import javafx.stage.Stage;
import javafx.scene.layout.AnchorPane;
import javafx.scene.control.TextArea;
import javafx.scene.Scene;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Optional;

import javafx.scene.control.Menu;
import javafx.scene.control.MenuBar;
import javafx.scene.control.MenuItem;


public class Controller extends Application {

	@FXML
	private Text output;
	
	private double number1 = 0;
	private String operator = "" ;
	
	private Model model = new Model();
	private boolean start = true;
	
	private TextArea tArea;
	private Stage stage;
	private String path;
	private String loadedContent = new String();
	
	@FXML
	private void processNumpad(ActionEvent event) {
		if (start) {
			output.setText("");
			start = false;
		}
		
		String value = ((Button)event.getSource()).getText();
		output.setText(output.getText() + value);
	}
	
	@FXML
	private void processOperator(ActionEvent event) {
		String value = ((Button)event.getSource()).getText();
		
		if(!"=".equals(value)) {
			if (!operator.isEmpty())
				return;
			
			operator = value;
			number1 = Double.parseDouble(output.getText());
			output.setText("");
		}
		else {
			//calculation
			if (operator.isEmpty())
				return;
			
			output.setText(String.valueOf(model.calculate(number1, Double.parseDouble(output.getText()), operator)));
			operator = "";
			start = true;
		}
	}
		//to transform , into . put does not work
		@FXML
		private void handleInput(ActionEvent event) {
		var newCharacter = ((Button) event.getSource()).getText();
			if (output.getText().contains(",") && newCharacter.equals(",")) {
				return;
			}
		    	output.setText(output.getText() + newCharacter);
			
		}
		
		//to show the graphs
		@FXML
		private void processGraph(ActionEvent event) {
			
		}
		
		//new stage for the third task
		public void start(Stage secondaryStage) throws Exception {
			tArea = new TextArea();
			this.stage = secondaryStage;
			
			AnchorPane root = new AnchorPane();
			tArea.setPrefWidth(600);
			tArea.setPrefWidth(400);
			MenuBar mBar = new MenuBar();
			mBar.setPrefWidth(600);
			
			root.getChildren().add(mBar);
			Menu menuFile = new Menu("File");
			
			mBar.getMenus().add(menuFile);
			
			MenuItem miNew = new MenuItem("New...");
			MenuItem miOpen = new MenuItem("Open...");
			MenuItem miSave = new MenuItem("Save");
			MenuItem miSaveAs = new MenuItem("Save As...");
			MenuItem miClose = new MenuItem("Close");
			
			miNew.setOnAction(e->{this.fileNew();});
			miOpen.setOnAction(e->{this.fileOpen();});
			miSave.setOnAction(e->{this.fileSave();});
			miSaveAs.setOnAction(e->{this.fileSaveAs();});
			miClose.setOnAction(e->{this.fileClose();});

			menuFile.getItems().addAll(miNew, miOpen, miSave, miSaveAs, miClose);
			
			secondaryStage.setTitle("Editor");
			secondaryStage.setScene(new Scene(root, 600, 400));
			secondaryStage.show();
			
		}
		
		public static void main (String[] args) {
			launch(args);
		}
		
		
	
		//file-menue:
		public void fileNew() {
			System.out.println("fileNew");
		}
		//to open a file
		public void fileOpen() {
			System.out.println("fileOpen");
			FileChooser fileChooser = new FileChooser();
			
			FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter("TXT files (*.txt)", ".txt");
			fileChooser.getExtensionFilters().add(extFilter);
			
	        FileChooser.ExtensionFilter extFilter1 = new FileChooser.ExtensionFilter("TXT files (*.txt)", "*.txt");
	        fileChooser.getExtensionFilters().add(extFilter1);
	        
			FileChooser.ExtensionFilter extFilter2 = new FileChooser.ExtensionFilter("All files", "*.*");
			fileChooser.getExtensionFilters().add(extFilter2);
			
			fileChooser.setTitle("File open");
			File file = fileChooser.showOpenDialog(stage);
				
			if(file == null)
				return;

			path = file.toString();
			byte[] buffer = new byte[ (int) file.length() ];
			InputStream in = null;
			try {
				in = new FileInputStream(file);
			} catch (FileNotFoundException error) {
				error.printStackTrace();
				System.out.println("File " + file + " not found");
			}
			try {
				in.read( buffer );
				in.close();
			} catch (IOException error) {
				error.printStackTrace();
				System.out.println("Can not read data");
			}
			String content = new String(buffer);
			tArea.setText(content);
			loadedContent = content;
		}
		//to save path and file
		public void fileSave() {		
			System.out.println("fileSave");
			if(path == null) {
				saveFileAs();
				return;
			}
			File file = new File(path);
			saveFile(file);		
		}
		
		public void fileSaveAs() {
			System.out.println("fileSaveAs");
			saveFileAs();
			
			
		}
		
		public void fileClose() {
			System.out.println("fileQuit");
			changes(tArea);					
			Platform.exit();
		}
		
		private void saveFile(File file) {
			byte[] buffer = tArea.getText().getBytes();
			OutputStream out = null;
			try {
				out = new FileOutputStream(file);
			} catch (FileNotFoundException e1) {
				e1.printStackTrace();
			}
			try {
				out.write( buffer );
				out.close();
			} catch (IOException e) {
				e.printStackTrace();
			}	
		
			loadedContent = tArea.getText();
		}
		
		private void saveFileAs() {
			FileChooser fileChooser = new FileChooser();		  
	        //Set extension filter
	        FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter("TXT files (*.txt)", "*.txt");
	        fileChooser.getExtensionFilters().add(extFilter);
	        
	        FileChooser.ExtensionFilter extFilter1 = new FileChooser.ExtensionFilter("TXT files (*.csv)", "*.csv");
	        fileChooser.getExtensionFilters().add(extFilter1);
	        
	        FileChooser.ExtensionFilter extFilter2 = new FileChooser.ExtensionFilter("JAVA files (*.java)", "*.java");
	        fileChooser.getExtensionFilters().add(extFilter2);
	        
	        FileChooser.ExtensionFilter extFilter3 = new FileChooser.ExtensionFilter("All files (*.*)", "*.*");
	        fileChooser.getExtensionFilters().add(extFilter3);
	       
	        File file = fileChooser.showSaveDialog(stage);
	        
	        if(file == null)
	        	return;
	        saveFile(file);
		}		
		
		private void changes(TextArea tArea) {	
			if(!loadedContent.equals(tArea.getText())) {
				Alert alert = new Alert(AlertType.CONFIRMATION);
				alert.setTitle("Save changes");
				alert.setHeaderText("Your data has been changed. Do you want save this?");
				alert.setContentText("");
	
				Optional<ButtonType> result = alert.showAndWait();
				if (result.get() == ButtonType.OK){
				    fileSaveAs();
				} 
	
			}
		}

}
